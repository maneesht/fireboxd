extend type Mutation {
  """
  Insert a single Movie into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movie_insert(data: Movie_Data!): Movie_Key! @fdc_generated(from: "Movie", purpose: INSERT_SINGLE)
  """
  Insert a single Rating into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  rating_insert(data: Rating_Data!): Rating_Key! @fdc_generated(from: "Rating", purpose: INSERT_SINGLE)
  """
  Insert a single User into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(data: User_Data!): User_Key! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  Insert Movie entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movie_insertMany(data: [Movie_Data!]!): [Movie_Key!]! @fdc_generated(from: "Movie", purpose: INSERT_MULTIPLE)
  """
  Insert Rating entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  rating_insertMany(data: [Rating_Data!]!): [Rating_Key!]! @fdc_generated(from: "Rating", purpose: INSERT_MULTIPLE)
  """
  Insert User entries into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(data: [User_Data!]!): [User_Key!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  Insert or update a single Movie into the table, based on the primary key. Returns the key of the newly inserted Movie.
  """
  movie_upsert(data: Movie_Data!): Movie_Key! @fdc_generated(from: "Movie", purpose: UPSERT_SINGLE)
  """
  Insert or update a single Rating into the table, based on the primary key. Returns the key of the newly inserted Rating.
  """
  rating_upsert(data: Rating_Data!): Rating_Key! @fdc_generated(from: "Rating", purpose: UPSERT_SINGLE)
  """
  Insert or update a single User into the table, based on the primary key. Returns the key of the newly inserted User.
  """
  user_upsert(data: User_Data!): User_Key! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  Insert or update Movie entries into the table, based on the primary key. Returns the key of the newly inserted Movie.
  """
  movie_upsertMany(data: [Movie_Data!]): [Movie_Key!]! @fdc_generated(from: "Movie", purpose: UPSERT_MULTIPLE)
  """
  Insert or update Rating entries into the table, based on the primary key. Returns the key of the newly inserted Rating.
  """
  rating_upsertMany(data: [Rating_Data!]): [Rating_Key!]! @fdc_generated(from: "Rating", purpose: UPSERT_MULTIPLE)
  """
  Insert or update User entries into the table, based on the primary key. Returns the key of the newly inserted User.
  """
  user_upsertMany(data: [User_Data!]): [User_Key!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  Update a single Movie based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  movie_update(id: UUID, key: Movie_Key, data: Movie_Data!): Movie_Key @fdc_generated(from: "Movie", purpose: UPDATE_SINGLE)
  """
  Update a single Rating based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  rating_update(id: UUID, key: Rating_Key, data: Rating_Data!): Rating_Key @fdc_generated(from: "Rating", purpose: UPDATE_SINGLE)
  """
  Update a single User based on `id` or `key`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(id: UUID, key: User_Key, data: User_Data!): User_Key @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  Update Movie entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  movie_updateMany(where: Movie_Filter, all: Boolean = false, data: Movie_Data!): Int! @fdc_generated(from: "Movie", purpose: UPDATE_MULTIPLE)
  """
  Update Rating entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  rating_updateMany(where: Rating_Filter, all: Boolean = false, data: Rating_Data!): Int! @fdc_generated(from: "Rating", purpose: UPDATE_MULTIPLE)
  """
  Update User entries matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(where: User_Filter, all: Boolean = false, data: User_Data!): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  Delete a single Movie based on `id` or `key` and return its key (or `null` if not found).
  """
  movie_delete(id: UUID, key: Movie_Key): Movie_Key @fdc_generated(from: "Movie", purpose: DELETE_SINGLE)
  """
  Delete a single Rating based on `id` or `key` and return its key (or `null` if not found).
  """
  rating_delete(id: UUID, key: Rating_Key): Rating_Key @fdc_generated(from: "Rating", purpose: DELETE_SINGLE)
  """
  Delete a single User based on `id` or `key` and return its key (or `null` if not found).
  """
  user_delete(id: UUID, key: User_Key): User_Key @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  Delete Movie entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  movie_deleteMany(where: Movie_Filter, all: Boolean = false): Int! @fdc_generated(from: "Movie", purpose: DELETE_MULTIPLE)
  """
  Delete Rating entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  rating_deleteMany(where: Rating_Filter, all: Boolean = false): Int! @fdc_generated(from: "Rating", purpose: DELETE_MULTIPLE)
  """
  Delete User entries matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(where: User_Filter, all: Boolean = false): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
